//iterative binary search
int BinarySearch(int A[], int n, int key) {
    int low = 0, high = n - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (A[mid] == key)
            return mid;  // Element found

        if (A[mid] < key)
            low = mid + 1;  // Search in the right half
        else
            high = mid - 1;  // Search in the left half
    }

    return -1;  // Element not found
}

//Recursive Binary Search
int BinarySearchRecursive(int A[], int low, int high, int key) {
    if (low > high)
        return -1;  // Base case: element not found

    int mid = low + (high - low) / 2;

    if (A[mid] == key)
        return mid;

    if (A[mid] < key)
        return BinarySearchRecursive(A, mid + 1, high, key);  // Search in right half
    else
        return BinarySearchRecursive(A, low, mid - 1, key);   // Search in left half
}


//Selection Sort
#include <stdio.h>

void SelectionSort(int A[], int n) {
    int i, j, minIndex, temp;

    for (i = 0; i < n - 1; i++) {
        minIndex = i;

        // Find the minimum element in the unsorted part
        for (j = i + 1; j < n; j++) {
            if (A[j] < A[minIndex])
                minIndex = j;
        }

        // Swap the found minimum element with the first element
        if (minIndex != i) {
            temp = A[i];
            A[i] = A[minIndex];
            A[minIndex] = temp;
        }
    }
}

// Function to print the array
void printArray(int A[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", A[i]);
    printf("\n");
}

int main() {
    int A[] = {64, 25, 12, 22, 11};
    int n = sizeof(A) / sizeof(A[0]);

    printf("Original array: ");
    printArray(A, n);

    SelectionSort(A, n);

    printf("Sorted array: ");
    printArray(A, n);

    return 0;
}


//Insertion Sort
#include <stdio.h>

void InsertionSort(int A[], int n) {
    int i, j, key;
    
    for (i = 1; i < n; i++) {
        key = A[i];
        j = i - 1;

        // Move elements that are greater than key one position ahead
        while (j >= 0 && A[j] > key) {
            A[j + 1] = A[j];
            j--;
        }
        A[j + 1] = key;  // Insert key at the correct position
    }
}

// Function to print the array
void printArray(int A[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", A[i]);
    printf("\n");
}

int main() {
    int A[] = {12, 11, 13, 5, 6};
    int n = sizeof(A) / sizeof(A[0]);

    printf("Original array: ");
    printArray(A, n);

    InsertionSort(A, n);

    printf("Sorted array: ");
    printArray(A, n);

    return 0;
}


//Radix Sort
#include <stdio.h>

// Function to get the maximum value in the array
int getMax(int A[], int n) {
    int max = A[0];
    for (int i = 1; i < n; i++)
        if (A[i] > max)
            max = A[i];
    return max;
}

// Counting Sort used as a subroutine in Radix Sort
void CountingSort(int A[], int n, int exp) {
    int output[n];  // Output array
    int count[10] = {0}; // Count array for digits (0-9)

    // Count occurrences of each digit at the current place value
    for (int i = 0; i < n; i++)
        count[(A[i] / exp) % 10]++;

    // Update count[i] to store the position of this digit in output[]
    for (int i = 1; i < 10; i++)
        count[i] += count[i - 1];

    // Build the output array
    for (int i = n - 1; i >= 0; i--) {
        output[count[(A[i] / exp) % 10] - 1] = A[i];
        count[(A[i] / exp) % 10]--;
    }

    // Copy sorted elements back to A[]
    for (int i = 0; i < n; i++)
        A[i] = output[i];
}

// Main function to implement Radix Sort
void RadixSort(int A[], int n) {
    int max = getMax(A, n);

    // Apply Counting Sort for each digit (1s, 10s, 100s, etc.)
    for (int exp = 1; max / exp > 0; exp *= 10)
        CountingSort(A, n, exp);
}

// Function to print an array
void printArray(int A[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", A[i]);
    printf("\n");
}

int main() {
    int A[] = {170, 45, 75, 90, 802, 24, 2, 66};
    int n = sizeof(A) / sizeof(A[0]);

    printf("Original array: ");
    printArray(A, n);

    RadixSort(A, n);

    printf("Sorted array: ");
    printArray(A, n);

    return 0;
}


//Bucket Sort
#include <stdio.h>
#include <stdlib.h>

#define BUCKET_SIZE 10  // Number of buckets

// Function to sort individual buckets using Insertion Sort
void InsertionSort(float A[], int n) {
    int i, j;
    float key;
    for (i = 1; i < n; i++) {
        key = A[i];
        j = i - 1;
        while (j >= 0 && A[j] > key) {
            A[j + 1] = A[j];
            j--;
        }
        A[j + 1] = key;
    }
}

// Bucket Sort function
void BucketSort(float A[], int n) {
    // Create buckets (array of lists)
    float *buckets[BUCKET_SIZE];
    int bucketCount[BUCKET_SIZE] = {0}; // Keep track of elements in each bucket

    // Allocate memory for buckets
    for (int i = 0; i < BUCKET_SIZE; i++) {
        buckets[i] = (float *)malloc(n * sizeof(float));
    }

    // Distribute elements into buckets
    for (int i = 0; i < n; i++) {
        int bucketIndex = A[i] * BUCKET_SIZE;  // Assuming numbers are in range [0,1)
        buckets[bucketIndex][bucketCount[bucketIndex]++] = A[i];
    }

    // Sort each bucket and concatenate results
    int index = 0;
    for (int i = 0; i < BUCKET_SIZE; i++) {
        if (bucketCount[i] > 0) {
            InsertionSort(buckets[i], bucketCount[i]); // Sort bucket
            for (int j = 0; j < bucketCount[i]; j++) {
                A[index++] = buckets[i][j];  // Copy sorted values back to original array
            }
        }
        free(buckets[i]); // Free memory
    }
}

// Function to print an array
void printArray(float A[], int n) {
    for (int i = 0; i < n; i++)
        printf("%.2f ", A[i]);
    printf("\n");
}

int main() {
    float A[] = {0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68};
    int n = sizeof(A) / sizeof(A[0]);

    printf("Original array: ");
    printArray(A, n);

    BucketSort(A, n);

    printf("Sorted array: ");
    printArray(A, n);

    return 0;
}


//Merge Sort
#include <stdio.h>

// Function to merge two subarrays
void Merge(int A[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;  // Size of left subarray
    int n2 = right - mid;     // Size of right subarray

    // Create temporary arrays
    int L[n1], R[n2];

    // Copy data to temporary arrays L[] and R[]
    for (i = 0; i < n1; i++)
        L[i] = A[left + i];
    for (j = 0; j < n2; j++)
        R[j] = A[mid + 1 + j];

    // Merge the two sorted subarrays back into A[]
    i = 0; j = 0; k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            A[k] = L[i];
            i++;
        } else {
            A[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy any remaining elements of L[], if any
    while (i < n1) {
        A[k] = L[i];
        i++; k++;
    }

    // Copy any remaining elements of R[], if any
    while (j < n2) {
        A[k] = R[j];
        j++; k++;
    }
}

// Function to implement Merge Sort
void MergeSort(int A[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        MergeSort(A, left, mid);     // Sort first half
        MergeSort(A, mid + 1, right); // Sort second half

        Merge(A, left, mid, right); // Merge sorted halves
    }
}

// Function to print an array
void printArray(int A[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", A[i]);
    printf("\n");
}

int main() {
    int A[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(A) / sizeof(A[0]);

    printf("Original array: ");
    printArray(A, n);

    MergeSort(A, 0, n - 1);

    printf("Sorted array: ");
    printArray(A, n);

    return 0;
}

//Merge Sort in Python
def merge_sort(arr):
    if len(arr) <= 1:
        return arr  # Base case: A single element is already sorted

    # Step 1: Divide the array into two halves
    mid = len(arr) // 2
    left_half = merge_sort(arr[:mid])   # Recursively sort left half
    right_half = merge_sort(arr[mid:])  # Recursively sort right half

    # Step 2: Merge the sorted halves
    return merge(left_half, right_half)

def merge(left, right):
    sorted_array = []
    i = j = 0

    # Compare elements and merge them in sorted order
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            sorted_array.append(left[i])
            i += 1
        else:
            sorted_array.append(right[j])
            j += 1

    # Add remaining elements from both halves (if any)
    sorted_array.extend(left[i:])
    sorted_array.extend(right[j:])

    return sorted_array

# Example usage
arr = [38, 27, 43, 3, 9, 82, 10]
print("Original array:", arr)

sorted_arr = merge_sort(arr)

print("Sorted array:", sorted_arr)